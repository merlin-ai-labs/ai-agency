name: Deploy to Cloud Run

# This workflow is COMMENTED OUT for now - uncomment when ready to deploy
# Configure the required secrets in GitHub repository settings:
# - GCP_PROJECT_ID: Your GCP project ID
# - GCP_SA_KEY: Service account JSON key with Cloud Run permissions
# - DATABASE_URL: PostgreSQL connection string for Cloud SQL
# - OPENAI_API_KEY: OpenAI API key

on:
  # Uncomment to enable automatic deployment on push to main
  # push:
  #   branches: [main]
  workflow_dispatch:  # Manual trigger only for now

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ai-agency
  REGION: us-central1
  IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-agency

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Uncomment when ready to deploy
    if: false  # Set to true to enable deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build \
            -t $IMAGE_NAME:${{ github.sha }} \
            -t $IMAGE_NAME:latest \
            .

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      - name: Run database migrations
        run: |
          # Run migrations as a Cloud Run job
          gcloud run jobs create migration-${{ github.sha }} \
            --image $IMAGE_NAME:${{ github.sha }} \
            --region $REGION \
            --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --execute-now \
            --wait || true

          # Alternative: Use Cloud SQL Proxy for migrations
          # curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.0/cloud-sql-proxy.linux.amd64
          # chmod +x cloud-sql-proxy
          # ./cloud-sql-proxy ${{ secrets.CLOUD_SQL_INSTANCE }} --port 5432 &
          # sleep 5
          # pip install alembic
          # alembic upgrade head

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_NAME:${{ github.sha }} \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --set-env-vars GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} \
            --set-env-vars GCS_BUCKET=${{ secrets.GCS_BUCKET }} \
            --set-env-vars LLM_PROVIDER=openai \
            --set-env-vars LOG_LEVEL=INFO \
            --set-env-vars ENVIRONMENT=production \
            --set-secrets OPENAI_API_KEY=openai-api-key:latest \
            --min-instances 1 \
            --max-instances 10 \
            --memory 2Gi \
            --cpu 2 \
            --timeout 300 \
            --concurrency 80 \
            --port 8080

      - name: Get deployment URL
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
            --region $REGION \
            --format 'value(status.url)')
          echo "Service deployed to: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
            --region $REGION \
            --format 'value(status.url)')

          # Test health endpoint
          curl -f "$SERVICE_URL/health" || exit 1

          echo "Deployment successful! Service is healthy."

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
          fi

# Additional workflow for staging environment
---
name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ai-agency-staging
  REGION: us-central1

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: false  # Set to true to enable staging deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push
        run: |
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} .
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }} \
            --set-env-vars ENVIRONMENT=staging \
            --min-instances 0 \
            --max-instances 5 \
            --memory 1Gi \
            --cpu 1
