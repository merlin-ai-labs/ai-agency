name: Deploy to Cloud Run

# Automatic deployment enabled for pushes to main branch
# Configure the required secrets in GitHub repository settings:
# - GCP_PROJECT_ID: merlin-notebook-lm
# - GCP_SA_KEY: Service account JSON key for ai-agency-runner@merlin-notebook-lm.iam.gserviceaccount.com
# Note: DATABASE_URL and OPENAI_API_KEY are stored in GCP Secret Manager, not GitHub secrets

on:
  push:
    branches: [main]
  workflow_dispatch:  # Also allow manual trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ai-agency
  REGION: europe-west1
  IMAGE_NAME: europe-west1-docker.pkg.dev/merlin-notebook-lm/ai-agency/app

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: true  # Deployment enabled

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build \
            -t $IMAGE_NAME:${{ github.sha }} \
            -t $IMAGE_NAME:latest \
            .

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      - name: Update clouddeploy.yaml with new image tag
        run: |
          sed -i "s|image: europe-west1-docker.pkg.dev/merlin-notebook-lm/ai-agency/app:latest|image: $IMAGE_NAME:${{ github.sha }}|g" clouddeploy.yaml

      - name: Deploy to Cloud Run
        run: |
          gcloud run services replace clouddeploy.yaml --region=$REGION

      - name: Get deployment URL
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
            --region $REGION \
            --format 'value(status.url)')
          echo "Service deployed to: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
            --region $REGION \
            --format 'value(status.url)')

          # Test health endpoint
          curl -f "$SERVICE_URL/healthz" || exit 1

          echo "Deployment successful! Service is healthy."

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
          fi

# Additional workflow for staging environment
---
name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ai-agency-staging
  REGION: us-central1

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: false  # Set to true to enable staging deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push
        run: |
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} .
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }} \
            --set-env-vars ENVIRONMENT=staging \
            --min-instances 0 \
            --max-instances 5 \
            --memory 1Gi \
            --cpu 1
