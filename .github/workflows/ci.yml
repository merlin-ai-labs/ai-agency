name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_agency_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -e ".[dev]"

      - name: Run Ruff linting
        run: |
          ruff check app tests
        continue-on-error: true  # Temporarily allow lint errors during Wave 1

      - name: Run Ruff formatting check
        run: |
          ruff format --check app tests
        continue-on-error: true  # Temporarily allow format errors during Wave 1

      - name: Run mypy type checking
        run: |
          mypy app
        continue-on-error: true  # Don't fail on type errors initially

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/ai_agency_test
        run: |
          alembic upgrade head

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/ai_agency_test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-test-key' }}
          GCP_PROJECT_ID: test-project
          GCS_BUCKET: test-bucket
          LLM_PROVIDER: openai
          LOG_LEVEL: DEBUG
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-fail-under=10 \
            -v
        # Note: Coverage threshold temporarily reduced to 10% for Waves 1-4
        # Will be increased to 80% in Wave 5 when QA Engineer adds comprehensive tests

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

      - name: Check test coverage threshold
        run: |
          coverage report --fail-under=10
        # Note: Temporarily reduced to 10% until Wave 5 comprehensive tests

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff
        run: |
          ruff check app tests --output-format=github
          ruff format --check app tests
        continue-on-error: true  # Temporarily allow lint errors during Wave 1
